{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","greenMode","role","style","backgroundColor","darkMode","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","toUpperCase","toLowerCase","tempText","newText","i","length","split","toFixed","App","setDarkMode","darkModeText","setDarkModeText","modeText","document","body","textMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c54204fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" >\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-a active\" aria-current=\"page\" href=\"#\"> \r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-a\" href=\"#\" >\r\n                  {props.aboutText}\r\n                </a>\r\n              </li> */}\r\n            </ul>\r\n\r\n            <input className=\"form-check-input\" onClick={props.greenMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDisabled\" style={{backgroundColor:'green'}}/>\r\n              \r\n            <div className={`form-check form-switch mx-3 text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.darkMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDisabled\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDisabled\">Enable Dark Mode</label>\r\n            </div>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title\",\r\n  aboutText: \"About   \"\r\n}               ","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    let [text,setText] = useState('');\r\n\r\n    const handleOnChange =(event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpperOnClick = ()=>{\r\n        setText(text.toUpperCase());\r\n    }\r\n\r\n    const handleLowerOnClick = ()=>{\r\n        setText(text.toLowerCase());\r\n    }\r\n\r\n    const handleCamelCaseOnClick = ()=>{\r\n        const tempText = text;\r\n        let newText = text[0].toUpperCase();\r\n        for(let i = 1;i<tempText.length; ++i){\r\n            if(tempText[i] === \" \"){\r\n                newText += tempText[i+1].toUpperCase();\r\n                i++;\r\n            }\r\n            else\r\n                newText += tempText[i];\r\n        }\r\n\r\n        setText(newText);\r\n    }\r\n\r\n    const handleClear = ()=>{\r\n        setText(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className={`container my-3  text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n            <div className={`mb-3 text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">\r\n                <h2>{props.heading}</h2>\r\n                </label>\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    id=\"exampleFormControlTextarea1\"\r\n                    value={text}\r\n                    onChange={handleOnChange}\r\n                    rows=\"8\"\r\n                >\r\n                </textarea>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpperOnClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLowerOnClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCamelCaseOnClick}>CamelCase</button>\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClear}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2>Text Summary</h2>\r\n                <p>Words: {text !== \"\"?(text.split(' ')[text.split(' ').length-1] === \"\"?text.split(' ').length-1:text.split(' ').length):0} | Characters: {text.length - text.split(' ').length + 1}</p>\r\n                <p>Reading Time: {(0.008 * text.split(' ').length).toFixed(3)} Minutes</p>\r\n\r\n                <h3>Preview:</h3>\r\n                <p>{text.length === 0? \"Enter text above to Preview here.\":text}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import Navbar from './Components/Navbar';\nimport './App.css';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n// import About from './Components/About'\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState('light');\n  const [darkModeText, setDarkModeText] = useState('dark');\n\n  const changeGreen = ()=>{\n      if(darkMode !== 'green'){\n        setDarkMode('green');\n        document.body.style.backgroundColor = 'green';\n      }\n      else{\n        document.body.style.backgroundColor = 'white';\n        setDarkModeText('dark');\n        setDarkMode('light');\n      }\n\n  }\n\n  const toggleMode = ()=>{\n    if(darkMode !== 'dark'){\n      setDarkMode('dark')\n      setDarkModeText('light')\n      document.body.style.backgroundColor = 'black';\n    }\n    else{\n      setDarkMode('light');\n      setDarkModeText('dark');\n      document.body.style.backgroundColor = 'white';\n    }\n  }\n\n  return (\n      <>\n      <Navbar title=\"TestUtils\" aboutText=\"About Us\" mode={darkMode} modeText={darkModeText} darkMode = {toggleMode} greenMode = {changeGreen}/>\n      <TextForm heading=\"Enter your Text to analyze\" mode={darkMode} textMode={darkModeText}/>    \n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}